{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-591edb9a6f06d359f34836f503d1a02a",
            "file": "src/app/app-state/app-state.ts",
            "type": "interface",
            "sourceCode": "export interface AppState {\r\n\r\n}",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-6186a417f408fe08acba33fd9450443f-1",
            "file": "src/app/books/store/book-store.reducer.ts",
            "type": "interface",
            "sourceCode": "import * as fromRoot from \"../../app-state/app-state\";\r\nimport * as BooksActions from \"./book-store.actions\";\r\nimport { Book } from './../add/add.domain';\r\n\r\nexport interface AppState extends fromRoot.AppState {\r\n    allBooks: Book[]\r\n}\r\nconst inintalState: Book[] = [\r\n    {\r\n        name: \"Bappa Morya Storeww\",\r\n        image: \"https://images.mid-day.com/images/2018/sep/Ganpati-idols_l.jpg\",\r\n        price: \"499\",\r\n        id: 2,\r\n        user: 1\r\n    }\r\n]\r\n\r\n\r\nexport function BookReducer(state = inintalState, action: BooksActions.Actions): Book[] {\r\n    switch (action.type) {\r\n        case BooksActions.BooksActionType.LOAD_ALL_BOOKS: {\r\n            return { ...state };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}",
            "properties": [
                {
                    "name": "allBooks",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppState-1"
        },
        {
            "name": "AuthUser",
            "id": "interface-AuthUser-505716b5f65dac74f849804d6839bd63",
            "file": "src/app/register/register.domain.ts",
            "type": "interface",
            "sourceCode": "export interface AuthUser {\r\n    firstName: string;\r\n    lastName: string;\r\n    userName: string;\r\n    password: string;\r\n    id?:number;\r\n}",
            "properties": [
                {
                    "name": "firstName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lastName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Book",
            "id": "interface-Book-56d2458b84120f8fb37303099587d323",
            "file": "src/app/books/add/add.domain.ts",
            "type": "interface",
            "sourceCode": "export interface Book {\r\n    name: string;\r\n    image: string;\r\n    price: string | number;\r\n    user: number;\r\n    id?: number;\r\n}",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "image",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "price",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "user",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginCredentials",
            "id": "interface-LoginCredentials-afe3d9f6f9459ecedb31d9936ac5abed",
            "file": "src/app/login/login.domain.ts",
            "type": "interface",
            "sourceCode": "export interface LoginCredentials {\r\n    userName: string,\r\n    password: string\r\n}",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Window",
            "id": "interface-Window-97d54d743e11b8b5e3f58846b7fb8808",
            "file": "src/main.ts",
            "type": "interface",
            "sourceCode": "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\ndeclare global {\n  interface Window {\n    WebComponents: {\n      ready: boolean;\n    };\n  }\n}\nif (environment.production) {\n  enableProdMode();\n}\nfunction bootstrapModule() {\n  platformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.log(err));\n}\nif (window.WebComponents.ready) {\n  // Web Components are ready\n  bootstrapModule();\n} else {\n  // Wait for polyfills to load\n  window.addEventListener('WebComponentsReady', bootstrapModule);\n}",
            "properties": [
                {
                    "name": "WebComponents",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AppService",
            "id": "injectable-AppService-a75e67bd9fdbff2fb1c98c9b8d96e9cb",
            "file": "src/app/app.service.ts",
            "properties": [
                {
                    "name": "loginTrigger",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getLoginUser",
                    "args": [],
                    "optional": false,
                    "returnType": "AuthUser",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isUserLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "logoutCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "storeLoginUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "AuthUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "AuthUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { AuthUser } from './register/register.domain';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppService {\r\n  public loginTrigger: BehaviorSubject<boolean>;\r\n\r\n  constructor() {\r\n    this.loginTrigger = new BehaviorSubject<boolean>(null);\r\n  }\r\n\r\n  public storeLoginUser(user: AuthUser): void {\r\n    localStorage.setItem('loginUser', JSON.stringify(user));\r\n    this.loginTrigger.next(true);\r\n  }\r\n\r\n  public getLoginUser(): AuthUser {\r\n    return JSON.parse(localStorage.getItem('loginUser'));\r\n  }\r\n\r\n  public logoutCurrentUser(): void {\r\n    localStorage.clear();\r\n    this.loginTrigger.next(false);\r\n  }\r\n\r\n  public isUserLoggedIn(): boolean {\r\n    return localStorage.length > 0;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "BooksEffect",
            "id": "injectable-BooksEffect-8547ca870ab873d6778fb3566c2fcff3",
            "file": "src/app/books/store/book-store.effects.ts",
            "properties": [
                {
                    "name": "loadAllBooks$",
                    "defaultValue": "this.actions$.pipe(\r\n        ofType<BooksAction.LoadAllBooks>(BooksAction.BooksActionType.LOAD_ALL_BOOKS),\r\n        mergeMap((action: BooksAction.LoadAllBooks) =>\r\n            this.bookservice.getAllBooksList().pipe(\r\n                map((books: Book[]) =>\r\n                    new BooksAction.LoadAllBooksSuccess(books)\r\n                ),\r\n                catchError(err => of(new BooksAction.LoadAllBooksFail(err)))\r\n            )\r\n        )\r\n    )",
                    "type": "Observable<Action>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\r\nimport { Action } from \"@ngrx/store\";\r\nimport { of, Observable } from \"rxjs\";\r\nimport { map, mergeMap, catchError } from \"rxjs/operators\";\r\nimport { BooksService } from './../books.service';\r\nimport { Book } from './../add/add.domain';\r\nimport * as BooksAction from \"./book-store.actions\";\r\n\r\n@Injectable()\r\nexport class BooksEffect {\r\n    constructor(\r\n        private actions$: Actions,\r\n        private bookservice: BooksService\r\n    ) { }\r\n\r\n    @Effect()\r\n    loadAllBooks$: Observable<Action> = this.actions$.pipe(\r\n        ofType<BooksAction.LoadAllBooks>(BooksAction.BooksActionType.LOAD_ALL_BOOKS),\r\n        mergeMap((action: BooksAction.LoadAllBooks) =>\r\n            this.bookservice.getAllBooksList().pipe(\r\n                map((books: Book[]) =>\r\n                    new BooksAction.LoadAllBooksSuccess(books)\r\n                ),\r\n                catchError(err => of(new BooksAction.LoadAllBooksFail(err)))\r\n            )\r\n        )\r\n    )\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "bookservice",
                        "type": "BooksService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookservice",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BooksService",
            "id": "injectable-BooksService-46573502be050582d821a7aa2e785a52",
            "file": "src/app/books/books.service.ts",
            "properties": [
                {
                    "name": "serverUrl",
                    "defaultValue": "'http://localhost:3000/allBooks'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addBook",
                    "args": [
                        {
                            "name": "bookData",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "bookData",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBookById",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<object>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllBooksList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Book[]>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getBookById",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLoginUserBooksList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Book[]>",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "updateBook",
                    "args": [
                        {
                            "name": "bookData",
                            "type": "Book"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Book>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "bookData",
                            "type": "Book",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { AuthUser } from './../register/register.domain';\r\nimport { AppService } from './../app.service';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Book } from './add/add.domain';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BooksService {\r\n  private readonly serverUrl = 'http://localhost:3000/allBooks';\r\n\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private appService: AppService\r\n  ) { }\r\n\r\n  public addBook(bookData: Book): Observable<Book> {\r\n    bookData.user = this.appService.getLoginUser().id;\r\n    return this.httpClient.post<Book>(this.serverUrl, bookData)\r\n  }\r\n  public updateBook(bookData: Book): Observable<Book> {\r\n    bookData.user = this.appService.getLoginUser().id;\r\n    return this.httpClient.put<Book>(`${this.serverUrl}/${bookData.id}`, bookData)\r\n  }\r\n  public deleteBookById(bookId: number): Observable<object> {\r\n    return this.httpClient.delete<object>(`${this.serverUrl}/${bookId}`)\r\n  }\r\n  public getAllBooksList(): Observable<Book[]> {\r\n    return this.httpClient.get<Book[]>(this.serverUrl)\r\n  }\r\n  public getBookById(bookId: number): Observable<Book> {\r\n    return this.httpClient.get<Book>(`${this.serverUrl}/${bookId}`)\r\n  }\r\n  public getLoginUserBooksList(): Observable<Book[]> {\r\n    return this.httpClient.get<Book[]>(this.serverUrl,\r\n      {\r\n        params: new HttpParams().\r\n          set('user', this.appService.getLoginUser().id.toString())\r\n      })\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-17d40d663eed2a0c90b527b95786242b",
            "file": "src/app/login/login.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkLoginUser",
                    "args": [
                        {
                            "name": "userData",
                            "type": "LoginCredentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AuthUser[]>",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "userData",
                            "type": "LoginCredentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { AuthUser } from './../register/register.domain';\r\nimport { LoginCredentials } from './login.domain';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n\r\n  constructor(\r\n    private httpClient: HttpClient\r\n  ) { }\r\n\r\n  checkLoginUser(userData: LoginCredentials): Observable<AuthUser[]> {\r\n    return this.httpClient.get<AuthUser[]>('http://localhost:3000/authUsers',\r\n      {\r\n        params: new HttpParams().\r\n          set('userName', userData.userName).\r\n          set('password', userData.password)\r\n      })\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RegisterService",
            "id": "injectable-RegisterService-b61095134564dd8b3eff2616997b97ca",
            "file": "src/app/register/register.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "registerUser",
                    "args": [
                        {
                            "name": "userData",
                            "type": "AuthUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AuthUser>",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "userData",
                            "type": "AuthUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AuthUser } from './register.domain';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterService {\r\n\r\n  constructor(\r\n    private httpClient: HttpClient\r\n  ) { }\r\n\r\n  registerUser(userData: AuthUser): Observable<AuthUser> {\r\n    return this.httpClient.post<AuthUser>('http://localhost:3000/authUsers', userData)\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Card",
            "id": "class-Card-7f613a91558a9b321f3aa073cca017c4",
            "file": "src/lit-element/card.ts",
            "type": "class",
            "sourceCode": "import { LitElement, css, html, customElement } from 'lit-element';\r\n\r\n@customElement('card-web')\r\nexport class Card extends LitElement {\r\n\r\n    static get styles() {\r\n        return css`\r\n        .card {\r\n            background-clip: border-box;\r\n            border: 1px solid var(--theme-text);\r\n            border-radius: 0.25rem;\r\n            padding: 5%;\r\n            box-shadow: 2px 2px 7px #888888;\r\n        }\r\n        `;\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n        <div class=\"card\">\r\n            <slot></slot>\r\n        <div>\r\n        `;\r\n    }\r\n}",
            "properties": [],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "",
                        "returnType": "",
                        "line": 6
                    }
                }
            }
        },
        {
            "name": "CustomInput",
            "id": "class-CustomInput-37b40cf98dc171cb057fb9ef5dcad292",
            "file": "src/lit-element/input-element.ts",
            "type": "class",
            "sourceCode": "import { LitElement, css, html, customElement, property } from 'lit-element';\r\n\r\n@customElement('custom-input')\r\nclass CustomInput extends LitElement {\r\n    @property() type: string = \"text\";\r\n    @property() placeholder: string = \"default\";\r\n\r\n    static get styles() {\r\n        return css`\r\n        input[type=\"text\"],\r\n        input[type=\"password\"] {\r\n            width: 100%;\r\n            padding: 12px 20px;\r\n            margin: 8px 0;\r\n            box-sizing: border-box;\r\n        }\r\n        `;\r\n    }\r\n    render() {\r\n        return html`\r\n            <input type=\"${this.type}\" placeholder=\"${this.placeholder}\"/>\r\n    `;\r\n    }\r\n}",
            "properties": [
                {
                    "name": "placeholder",
                    "defaultValue": "\"default\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "decorators": [
                        {
                            "name": "property",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "\"text\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "decorators": [
                        {
                            "name": "property",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "extends": "LitElement",
            "accessors": {
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "",
                        "returnType": "",
                        "line": 8
                    }
                }
            }
        },
        {
            "name": "LoadAllBooks",
            "id": "class-LoadAllBooks-5359bfd8a69e121e52fedd561939eccd",
            "file": "src/app/books/store/book-store.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\r\nimport { Book } from './../add/add.domain';\r\n\r\nexport enum BooksActionType {\r\n    LOAD_ALL_BOOKS = \"[BOOKS] Load All Books\",\r\n    LOAD_ALL_BOOKS_SUCCESS = \"[BOOKS] Load Books Success\",\r\n    LOAD_ALL_BOOKS_FAIL = \"[BOOKS] Load Books Fail\",\r\n}\r\n\r\nexport class LoadAllBooks implements Action {\r\n    type: BooksActionType.LOAD_ALL_BOOKS;\r\n}\r\nexport class LoadAllBooksSuccess implements Action {\r\n    type: BooksActionType.LOAD_ALL_BOOKS_SUCCESS;\r\n    constructor(public payload: Book[]) { }\r\n}\r\nexport class LoadAllBooksFail implements Action {\r\n    type: BooksActionType.LOAD_ALL_BOOKS_FAIL;\r\n    constructor(public payload: string) { }\r\n}\r\n\r\nexport type Actions = LoadAllBooks | LoadAllBooksSuccess | LoadAllBooksFail;",
            "properties": [
                {
                    "name": "type",
                    "type": "BooksActionType.LOAD_ALL_BOOKS",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadAllBooksFail",
            "id": "class-LoadAllBooksFail-5359bfd8a69e121e52fedd561939eccd",
            "file": "src/app/books/store/book-store.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\r\nimport { Book } from './../add/add.domain';\r\n\r\nexport enum BooksActionType {\r\n    LOAD_ALL_BOOKS = \"[BOOKS] Load All Books\",\r\n    LOAD_ALL_BOOKS_SUCCESS = \"[BOOKS] Load Books Success\",\r\n    LOAD_ALL_BOOKS_FAIL = \"[BOOKS] Load Books Fail\",\r\n}\r\n\r\nexport class LoadAllBooks implements Action {\r\n    type: BooksActionType.LOAD_ALL_BOOKS;\r\n}\r\nexport class LoadAllBooksSuccess implements Action {\r\n    type: BooksActionType.LOAD_ALL_BOOKS_SUCCESS;\r\n    constructor(public payload: Book[]) { }\r\n}\r\nexport class LoadAllBooksFail implements Action {\r\n    type: BooksActionType.LOAD_ALL_BOOKS_FAIL;\r\n    constructor(public payload: string) { }\r\n}\r\n\r\nexport type Actions = LoadAllBooks | LoadAllBooksSuccess | LoadAllBooksFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "type": "BooksActionType.LOAD_ALL_BOOKS_FAIL",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadAllBooksSuccess",
            "id": "class-LoadAllBooksSuccess-5359bfd8a69e121e52fedd561939eccd",
            "file": "src/app/books/store/book-store.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from \"@ngrx/store\";\r\nimport { Book } from './../add/add.domain';\r\n\r\nexport enum BooksActionType {\r\n    LOAD_ALL_BOOKS = \"[BOOKS] Load All Books\",\r\n    LOAD_ALL_BOOKS_SUCCESS = \"[BOOKS] Load Books Success\",\r\n    LOAD_ALL_BOOKS_FAIL = \"[BOOKS] Load Books Fail\",\r\n}\r\n\r\nexport class LoadAllBooks implements Action {\r\n    type: BooksActionType.LOAD_ALL_BOOKS;\r\n}\r\nexport class LoadAllBooksSuccess implements Action {\r\n    type: BooksActionType.LOAD_ALL_BOOKS_SUCCESS;\r\n    constructor(public payload: Book[]) { }\r\n}\r\nexport class LoadAllBooksFail implements Action {\r\n    type: BooksActionType.LOAD_ALL_BOOKS_FAIL;\r\n    constructor(public payload: string) { }\r\n}\r\n\r\nexport type Actions = LoadAllBooks | LoadAllBooksSuccess | LoadAllBooksFail;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Book[]"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Book[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "type": "BooksActionType.LOAD_ALL_BOOKS_SUCCESS",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddComponent",
            "id": "component-AddComponent-5bf8b2a7c1b597671be0f763b7e991b6",
            "file": "src/app/books/add/add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add",
            "styleUrls": [
                "./add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addBookForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "bookIdForEdit",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isEdit",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addBook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "addNewBook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "checkUrlLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getBookForUpdate",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "updateBook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Book } from './add.domain';\r\nimport { BooksService } from './../books.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-add',\r\n  templateUrl: './add.component.html',\r\n  styleUrls: ['./add.component.scss']\r\n})\r\nexport class AddComponent implements OnInit {\r\n  public addBookForm: FormGroup;\r\n  public isEdit: boolean;\r\n  private bookIdForEdit: number;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private bookService: BooksService,\r\n    private activatedRoute: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.addBookForm = this.createForm();\r\n    this.checkUrlLoad();\r\n  }\r\n\r\n  private createForm() {\r\n    return this.fb.group({\r\n      name: [null, Validators.compose([Validators.required])],\r\n      image: [null, Validators.compose([Validators.required])],\r\n      price: [null, Validators.compose([Validators.required])]\r\n    })\r\n  }\r\n  public addBook() {\r\n    if (this.addBookForm.valid) {\r\n      this.isEdit ? this.updateBook() : this.addNewBook();\r\n    } else {\r\n      alert(\"Fill form properly!\");\r\n    }\r\n  }\r\n\r\n  private addNewBook() {\r\n    this.bookService.addBook(this.addBookForm.value).subscribe((res: Book) => {\r\n      if (res) {\r\n        alert(\"Book Added Successfully\");\r\n        this.addBookForm.reset();\r\n        this.router.navigate(['../list'], { relativeTo: this.activatedRoute })\r\n      }\r\n    });\r\n  }\r\n  private updateBook() {\r\n    let bookFinal = { ...this.addBookForm.value, id: this.bookIdForEdit }\r\n    console.log(\"bookFinal \", bookFinal);\r\n    this.bookService.updateBook(bookFinal).subscribe((res: Book) => {\r\n      if (res) {\r\n        alert(\"Book Updated Successfully\");\r\n        this.addBookForm.reset();\r\n        this.router.navigate(['../../list'], { relativeTo: this.activatedRoute })\r\n      }\r\n    });\r\n  }\r\n  private checkUrlLoad() {\r\n    this.activatedRoute.params.subscribe(urlParam => {\r\n      if (urlParam && urlParam.id) {\r\n        this.isEdit = true;\r\n        this.bookIdForEdit = urlParam.id;\r\n        this.getBookForUpdate(urlParam.id);\r\n      } else {\r\n        this.isEdit = false;\r\n      }\r\n    })\r\n  }\r\n\r\n  private getBookForUpdate(bookId: number) {\r\n    this.bookService.getBookById(bookId).subscribe((book: Book) => {\r\n      console.log(\"book \", book);\r\n      if (book) {\r\n        this.addBookForm.patchValue(book);\r\n      }\r\n    })\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    display: grid;\r\n    grid-template-columns: auto 30% auto;\r\n    height: 85vh;\r\n    .main-form {\r\n        label {\r\n            font-weight: 500;\r\n        }\r\n        .btn-login {\r\n            background-color: black;\r\n            margin-top: 10px;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "bookService",
                        "type": "BooksService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bookService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\">\r\n    <div class=\"grid-item\"></div>\r\n    <card-web class=\"m-auto\">\r\n\r\n        <h2 class=\"text-center\">{{isEdit?'Update':'Add New '}} Book</h2>\r\n        <hr>\r\n        <form class=\"main-form\" [formGroup]=\"addBookForm\">\r\n            <label for=\"bookName\">Book Name</label>\r\n            <input type=\"text\" id=\"bookName\" placeholder=\"Book Name\" formControlName=\"name\">\r\n            <label for=\"bookUrl\">Book Image Url</label>\r\n            <input type=\"text\" id=\"bookUrl\" placeholder=\"Image Url\" formControlName=\"image\">\r\n            <label for=\"bookPrice\">Price</label>\r\n            <input type=\"text\" id=\"bookPrice\" placeholder=\"Book Price\" formControlName=\"price\">\r\n            <!-- <label for=\"lname\">Password</label>\r\n            <input type=\"password\" id=\"lname\" placeholder=\"Password\"> -->\r\n\r\n            <div class=\"text-center\">\r\n                <button class=\"button btn-login\" (click)=\"addBook()\">{{isEdit?'Update':'Add'}} Book</button>\r\n            </div>\r\n        </form>\r\n    </card-web>\r\n\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c0ef5ddf1aefdb868e6a0fb1a57b1fe8",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'angularStarter'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'angularStarter';\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif,\r\n        \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\r\n    font-size: 14px;\r\n    color: #333;\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-navbar></app-navbar>\r\n<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-97259323aeb799a66a28c191dc4d141b",
            "file": "src/app/books/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list",
            "styleUrls": [
                "./list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "booksList",
                    "type": "Book[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "defaultCover",
                    "defaultValue": "'https://www.mockupworld.co/wp-content/uploads/dynamic/2016/06/free-hardcover-square-book-mockup1-536x0-c-default.jpg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loginUserId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkLoginStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "checkUrlLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "deleteBook",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editBookOpt",
                    "args": [
                        {
                            "name": "bookId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "bookId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getLoginUserBooks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { BooksService } from './../books.service';\r\nimport { Book } from './../add/add.domain';\r\nimport { AppService } from './../../app.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute, UrlSegment } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport * as BooksAction from '../store/book-store.actions';\r\n\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss']\r\n})\r\nexport class ListComponent implements OnInit {\r\n  public readonly defaultCover = 'https://www.mockupworld.co/wp-content/uploads/dynamic/2016/06/free-hardcover-square-book-mockup1-536x0-c-default.jpg';\r\n  public isLoggedIn: boolean;\r\n  public booksList: Book[];\r\n  public loginUserId: number;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private appService: AppService,\r\n    private booksService: BooksService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private store: Store<any>\r\n  ) {\r\n    this.booksList = [];\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.checkLoginStatus();\r\n    this.checkUrlLoad();\r\n  }\r\n  private checkUrlLoad() {\r\n    this.activatedRoute.url.subscribe((urlParam: UrlSegment[]) => {\r\n      if (urlParam && urlParam.length > 0) {\r\n        urlParam.length > 0 && urlParam[0].path === 'list' ?\r\n          this.getLoginUserBooks() : this.getAllBooks();\r\n      }\r\n    })\r\n  }\r\n  private checkLoginStatus() {\r\n    this.isLoggedIn = this.appService.isUserLoggedIn();\r\n    this.isLoggedIn ? this.loginUserId = this.appService.getLoginUser().id : '';\r\n    this.appService.loginTrigger.subscribe((log: boolean) => {\r\n      if (log !== null) {\r\n        this.isLoggedIn = log;\r\n      }\r\n    })\r\n  }\r\n  private getAllBooks() {\r\n    this.store.dispatch(new BooksAction.LoadAllBooks());\r\n    this.store.subscribe(state => {\r\n      this.booksList = state.books;\r\n    })\r\n    // this.booksService.getAllBooksList().subscribe((allBooks: Book[]) => {\r\n    //   this.booksList = allBooks;\r\n    // })\r\n  }\r\n  private getLoginUserBooks() {\r\n    this.booksService.getLoginUserBooksList().subscribe((allBooks: Book[]) => {\r\n      this.booksList = allBooks;\r\n    })\r\n  }\r\n  public editBookOpt(bookId: number) {\r\n    this.router.navigate([`../update/${bookId}`], { relativeTo: this.activatedRoute });\r\n  }\r\n  public deleteBook(bookId: number) {\r\n    this.booksService.deleteBookById(bookId).subscribe((result: object) => {\r\n      if (result) {\r\n        this.booksList.splice(this.booksList.findIndex(ele => ele.id === bookId), 1);\r\n        alert('Book Deleted From Library!');\r\n      }\r\n    })\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    display: grid;\r\n    grid-template-columns: 15% 15% 15% 15% 15% 15%;\r\n    grid-gap: 25px;\r\n    padding: 2%;\r\n\r\n    .row {\r\n        grid-column-start: 1;\r\n        grid-column-end: 7;\r\n        text-align: right;\r\n    }\r\n\r\n    .card-size {\r\n        height: 200px;\r\n        max-width: 90%;\r\n        .inner-pos {\r\n            color: var(--theme-text);\r\n            img {\r\n                object-fit: cover;\r\n            }\r\n            .book-name {\r\n                display: block;\r\n                text-align: left;\r\n                white-space: nowrap;\r\n                font-size: medium;\r\n                width: 160px;\r\n                overflow: hidden;\r\n                text-overflow: ellipsis;\r\n            }\r\n            .button-bracket {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                .button {\r\n                    padding: 1px 15px;\r\n                }\r\n                .btn-edit {\r\n                    color: black;\r\n                    &:hover {\r\n                        background-color: lightsalmon;\r\n                    }\r\n                }\r\n                .btn-del {\r\n                    color: black;\r\n                    &:hover {\r\n                        background-color: red;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n.not-data-msg {\r\n    color: var(--theme-text);\r\n    text-align: center;\r\n    text-decoration: underline;\r\n}\r\n",
                    "styleUrl": "./list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "booksService",
                        "type": "BooksService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<any>"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "booksService",
                        "type": "BooksService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<any>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\">\r\n    <card-web class=\"card-size\" *ngFor=\"let book of booksList\">\r\n        <!-- <div class=\"card card-size\" *ngFor=\"let book of booksList\"> -->\r\n        <div class=\"inner-pos\">\r\n            <img [src]=\"book.image?book.image: defaultCover\" width=\"100%\" height=\"98px\">\r\n            <hr>\r\n            <b class=\"book-name\">{{book.name}}</b>\r\n            <small>Rs. {{book.price}}/-</small>\r\n            <hr *ngIf=\"isLoggedIn\">\r\n            <div class=\"button-bracket\" *ngIf=\"isLoggedIn\">\r\n                <button class=\"button btn-edit\" *ngIf=\"loginUserId===book.user\"\r\n                    (click)=\"editBookOpt(book.id)\">Edit</button>\r\n                <button class=\"button btn-del\" *ngIf=\"loginUserId===book.user\"\r\n                    (click)=\"deleteBook(book.id)\">Delete</button>\r\n            </div>\r\n        </div>\r\n    </card-web>\r\n</div>\r\n<card-web *ngIf=\"booksList.length<=0\">\r\n    <h2 class=\"not-data-msg \">No Books Added To Show</h2>\r\n</card-web>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-177f93bb9b2b03493d5c7b277359b23c",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkUserExistance",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AppService } from './../app.service';\r\nimport { AuthUser } from './../register/register.domain';\r\nimport { LoginService } from './login.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  public loginForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private appService: AppService,\r\n    private loginService: LoginService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.createForm();\r\n  }\r\n\r\n  private createForm() {\r\n    return this.fb.group({\r\n      userName: [null, Validators.compose([Validators.required])],\r\n      password: [null, Validators.compose([Validators.required])]\r\n    })\r\n  }\r\n\r\n  checkUserExistance() {\r\n    console.log(\"this.loginForm.value \", this.loginForm.value);\r\n    if (this.loginForm.valid) {\r\n      this.loginService.checkLoginUser(this.loginForm.value).subscribe((res: AuthUser[]) => {\r\n        console.log(\"res \", res);\r\n        if (res && res.length > 0) {\r\n          alert('Logged In Successfully');\r\n          delete res[0].password;\r\n          this.appService.storeLoginUser(res[0]);\r\n          this.loginForm.reset();\r\n          this.router.navigate(['./books/list']);\r\n          return;\r\n        }\r\n        alert('Username or password invalid');\r\n      }, err => alert(err))\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    display: grid;\r\n    grid-template-columns: auto 30% auto;\r\n    height: 85vh;\r\n    .main-form {\r\n        label {\r\n            font-weight: 500;\r\n        }\r\n        .btn-login {\r\n            background-color: black;\r\n            margin-top: 10px;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\">\r\n    <div class=\"grid-item\"></div>\r\n    <card-web class=\"m-auto\">\r\n        <h2 class=\"text-center\">Login</h2>\r\n        <hr>\r\n        <form class=\"main-form\" [formGroup]=\"loginForm\">\r\n            <label for=\"username\">Username</label>\r\n            <input type=\"text\" id=\"username\" placeholder=\"Username\" formControlName=\"userName\">\r\n            <label for=\"password\">Password</label>\r\n            <input type=\"password\" id=\"password\" placeholder=\"Password\" formControlName=\"password\">\r\n\r\n            <div class=\"text-center\">\r\n                <button class=\"button btn-login\" (click)=\"checkUserExistance()\">Login</button>\r\n            </div>\r\n        </form>\r\n    </card-web>\r\n\r\n</div>"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-90fbfe50b601ca99d202890d45fc66ce",
            "file": "src/app/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoggedIn",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkLoginStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "goToRouteAdd",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logoutSession",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "toggleTheme",
                    "args": [
                        {
                            "name": "val",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AppService } from './../app.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.scss']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n  public isLoggedIn: boolean;\r\n\r\n  constructor(\r\n    private route: Router,\r\n    private appService: AppService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.checkLoginStatus();\r\n  }\r\n\r\n  public toggleTheme(val) {\r\n    if (val) {\r\n      document.documentElement.style.setProperty('--theme-header', val.checked ? '#ffffff' : '#000000');\r\n      document.documentElement.style.setProperty('--theme-body', val.checked ? '#ffffff' : '#a9a9a9');\r\n      document.documentElement.style.setProperty('--theme-text', val.checked ? '#000000' : '#ffffff');\r\n    }\r\n  }\r\n  public goToRouteAdd(path: string): void {\r\n    this.route.navigate([`../books/${path}`])\r\n  }\r\n  private checkLoginStatus() {\r\n    this.appService.loginTrigger.subscribe((status: boolean) => {\r\n      console.log(\"status \", status);\r\n      this.isLoggedIn = status;\r\n    });\r\n    this.isLoggedIn = this.appService.isUserLoggedIn();\r\n  }\r\n  logoutSession() {\r\n    this.appService.logoutCurrentUser();\r\n    this.route.navigate(['../books/all'])\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  .spacer {\r\n    flex: 1;\r\n  }\r\n  .marl {\r\n    margin-left: 10px;\r\n    color: var(--theme-text);\r\n    border: 1px solid var(--theme-text);\r\n    padding: 10px;\r\n  }\r\n  .anchor-color {\r\n    color: var(--theme-text);\r\n    margin-left: 2%;\r\n    &.addRoute {\r\n      cursor: pointer;\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n  .toolbar {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    height: 60px;\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: var(--theme-header);\r\n    color: white;\r\n    font-weight: 600;\r\n    border-bottom: 1px solid var(--theme-text);\r\n  }\r\n  .switch {\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 60px;\r\n    height: 27px;\r\n    margin: 0 10px;\r\n  }\r\n\r\n  .switch input {\r\n    display: none;\r\n  }\r\n\r\n  .slider {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: black;\r\n    -webkit-transition: 0.4s;\r\n    transition: 0.4s;\r\n  }\r\n\r\n  .slider:before {\r\n    position: absolute;\r\n    content: \"\";\r\n    height: 26px;\r\n    width: 26px;\r\n    left: 1px;\r\n    bottom: 1px;\r\n    background-color: lightgray;\r\n    -webkit-transition: 0.4s;\r\n    transition: 0.4s;\r\n  }\r\n\r\n  input:checked + .slider {\r\n    background-color: white;\r\n  }\r\n\r\n  input:focus + .slider {\r\n    box-shadow: 0 0 1px #2196f3;\r\n  }\r\n\r\n  input:checked + .slider:before {\r\n    -webkit-transform: translateX(32px);\r\n    -ms-transform: translateX(32px);\r\n    transform: translateX(32px);\r\n  }\r\n\r\n  .innerText {\r\n    position: absolute;\r\n    transform: translate(-50%, -50%);\r\n    top: 50%;\r\n    font-size: 10px;\r\n    font-family: Verdana, sans-serif;\r\n    &.dark {\r\n      left: 70%;\r\n      color: white;\r\n    }\r\n    &.light {\r\n      display: none;\r\n      left: 30%;\r\n      color: black;\r\n    }\r\n  }\r\n\r\n  input:checked + .slider .light {\r\n    display: block;\r\n  }\r\n\r\n  input:checked + .slider .dark {\r\n    display: none;\r\n  }\r\n\r\n  /* Rounded sliders */\r\n  .slider.round {\r\n    border-radius: 34px;\r\n  }\r\n\r\n  .slider.round:before {\r\n    border-radius: 50%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "Router"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"toolbar\" role=\"banner\">\r\n    <h4 class=\"marl\"> Books Mania</h4>\r\n    <div class=\"spacer\"></div>\r\n\r\n    <a class=\"anchor-color\" [routerLink]=\"['./books/all']\">Home</a>\r\n    <a class=\"anchor-color\" [routerLink]=\"['./login']\" *ngIf=\"!isLoggedIn\">Login</a>\r\n    <a class=\"anchor-color\" [routerLink]=\"['./register']\" *ngIf=\"!isLoggedIn\">Register</a>\r\n    <a class=\"anchor-color addRoute\" (click)=\"goToRouteAdd('add')\" *ngIf=\"isLoggedIn\">Add Book +</a>\r\n    <a class=\"anchor-color addRoute\" (click)=\"goToRouteAdd('list')\" *ngIf=\"isLoggedIn\">Your Books</a>\r\n    <a class=\"anchor-color addRoute\" (click)=\"logoutSession()\" *ngIf=\"isLoggedIn\">Logout</a>\r\n\r\n    <label class=\"switch\">\r\n        <input type=\"checkbox\" id=\"togBtn\" #ck (click)=\"toggleTheme(ck)\">\r\n        <div class=\"slider round\">\r\n            <span class=\"innerText light\">Light</span><span class=\"innerText dark\">Dark</span>\r\n        </div>\r\n    </label>\r\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-8509966ddd8f09fad4e1222a39c2d34a",
            "file": "src/app/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "registerUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AuthUser } from './register.domain';\r\nimport { RegisterService } from './register.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  public registerForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private registerService: RegisterService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.registerForm = this.createForm();\r\n  }\r\n\r\n  private createForm() {\r\n    return this.fb.group({\r\n      firstName: [null, Validators.compose([Validators.required])],\r\n      lastName: [null, Validators.compose([Validators.required])],\r\n      userName: [null, Validators.compose([Validators.required])],\r\n      password: [null, Validators.compose([Validators.required])]\r\n    })\r\n  }\r\n  registerUser() {\r\n    if (this.registerForm.valid) {\r\n      this.registerService.registerUser(this.registerForm.value).subscribe((res:AuthUser) => {\r\n        if (res) {\r\n          alert('User Registered Successfully');\r\n          this.registerForm.reset();\r\n          this.router.navigate(['./login']);\r\n        }\r\n      }, err => alert(err))\r\n    }\r\n    console.log(\"this.registerForm.value \", this.registerForm.value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".grid-container {\r\n    display: grid;\r\n    grid-template-columns: auto 30% auto;\r\n    height: 85vh;\r\n    .main-form {\r\n        label {\r\n            font-weight: 500;\r\n        }\r\n        .btn-login {\r\n            background-color: black;\r\n            margin-top: 10px;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "registerService",
                        "type": "RegisterService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "registerService",
                        "type": "RegisterService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"grid-container\">\r\n    <div class=\"grid-item\"></div>\r\n    <card-web class=\"m-auto\">\r\n        <h2 class=\"text-center\">Registration</h2>\r\n        <hr>\r\n        <form class=\"main-form\" [formGroup]=\"registerForm\">\r\n            <label for=\"fname\">First Name</label>\r\n            <input type=\"text\" id=\"fname\" placeholder=\"First Name\" formControlName=\"firstName\">\r\n            <label for=\"lname\">Last Name</label>\r\n            <input type=\"text\" id=\"lname\" placeholder=\"Last Name\" formControlName=\"lastName\">\r\n            <label for=\"uname\">Username</label>\r\n            <input type=\"text\" id=\"uname\" placeholder=\"New Username\" formControlName=\"userName\">\r\n            <label for=\"pass\">Password</label>\r\n            <input type=\"password\" id=\"pass\" placeholder=\"Password\" formControlName=\"password\">\r\n\r\n            <div class=\"text-center\">\r\n                <button class=\"button btn-login\" (click)=\"registerUser()\">Register</button>\r\n            </div>\r\n        </form>\r\n    </card-web>\r\n\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BooksModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "BooksEffect"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddComponent"
                        },
                        {
                            "name": "ListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BooksRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BooksRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "inintalState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/books/store/book-store.reducer.ts",
                "type": "Book[]",
                "defaultValue": "[\r\n    {\r\n        name: \"Bappa Morya Storeww\",\r\n        image: \"https://images.mid-day.com/images/2018/sep/Ganpati-idols_l.jpg\",\r\n        price: \"499\",\r\n        id: 2,\r\n        user: 1\r\n    }\r\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "BookReducer",
                "file": "src/app/books/store/book-store.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "Book[]",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "bootstrapModule",
                "file": "src/main.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LoadAllBooks | LoadAllBooksSuccess | LoadAllBooksFail",
                "file": "src/app/books/store/book-store.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "BooksActionType",
                "childs": [
                    {
                        "name": "LOAD_ALL_BOOKS",
                        "value": "[BOOKS] Load All Books"
                    },
                    {
                        "name": "LOAD_ALL_BOOKS_SUCCESS",
                        "value": "[BOOKS] Load Books Success"
                    },
                    {
                        "name": "LOAD_ALL_BOOKS_FAIL",
                        "value": "[BOOKS] Load Books Fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/books/store/book-store.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/books/store/book-store.reducer.ts": [
                {
                    "name": "inintalState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/books/store/book-store.reducer.ts",
                    "type": "Book[]",
                    "defaultValue": "[\r\n    {\r\n        name: \"Bappa Morya Storeww\",\r\n        image: \"https://images.mid-day.com/images/2018/sep/Ganpati-idols_l.jpg\",\r\n        price: \"499\",\r\n        id: 2,\r\n        user: 1\r\n    }\r\n]"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/books/store/book-store.reducer.ts": [
                {
                    "name": "BookReducer",
                    "file": "src/app/books/store/book-store.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "Book[]",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/main.ts": [
                {
                    "name": "bootstrapModule",
                    "file": "src/main.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/books/store/book-store.actions.ts": [
                {
                    "name": "BooksActionType",
                    "childs": [
                        {
                            "name": "LOAD_ALL_BOOKS",
                            "value": "[BOOKS] Load All Books"
                        },
                        {
                            "name": "LOAD_ALL_BOOKS_SUCCESS",
                            "value": "[BOOKS] Load Books Success"
                        },
                        {
                            "name": "LOAD_ALL_BOOKS_FAIL",
                            "value": "[BOOKS] Load Books Fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/books/store/book-store.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/books/store/book-store.actions.ts": [
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LoadAllBooks | LoadAllBooksSuccess | LoadAllBooksFail",
                    "file": "src/app/books/store/book-store.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app-state/app-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/books/add/add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/books/add/add.domain.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Book",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/books/books.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BooksService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/books/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/books/store/book-store.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAllBooks",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/books/store/book-store.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAllBooksFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/books/store/book-store.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadAllBooksSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/books/store/book-store.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BooksEffect",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/books/store/book-store.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/books/store/book-store.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "BookReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/books/store/book-store.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inintalState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.domain.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginCredentials",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/register/register.domain.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthUser",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/register/register.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegisterService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lit-element/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/lit-element/input-element.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomInput",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Window",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "bootstrapModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}